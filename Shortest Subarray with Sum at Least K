class Solution {
public:
    int shortestSubarray(vector<int>& nums, int k) {
        int n=nums.size();
        vector<int> prefixsum(n+1),vr(n+1);
        for(int i=0;i<n+1;i++) vr[i]=-1;
        deque<int> q;
        prefixsum[0]=0;
        for(int i=1;i<=n;i++){
            prefixsum[i]=prefixsum[i-1]+nums[i-1];
        }
        for(int i=n;i>=0;i--){
            while(!q.empty() && prefixsum[i]+k<=prefixsum[q.back()]){
                vr[i]=q.back();
                q.pop_back();
            }
            while(!q.empty() && prefixsum[q.front()]<=prefixsum[i]) q.pop_front();
            q.push_front(i);
        }
        int count=n+1;
        for(int i=0;i<n+1;i++){
            if(vr[i]==-1) continue;
            else count=min(count,vr[i]-i);
        }
        if(count==n+1) return -1;
        return count;
    }
};
